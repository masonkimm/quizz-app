{"version":3,"sources":["API.ts","logo.svg","components/QuestionCard.style.ts","components/QuestionCard.tsx","utils.ts","App.tsx","index.tsx"],"names":["Difficulty","ButtonWrapper","styled","div","correct","userClicked","QuestionCard","question","answers","callback","userAnswers","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endPoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","src","logo","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c13f379.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n  EASY = 'easy',\n  MEDIUM = 'medium',\n  HARD = 'hard',\n}\n\nexport const fetchQuizQuestions = async (\n  amount: number,\n  difficulty: Difficulty\n) => {\n  const endPoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  //first away fetch itself, await endpoint\n  const data = await (await fetch(endPoint)).json();\n  // console.log(data);\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n};\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import styled from 'styled-components';\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n  }\n  button {\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\n        : !correct && userClicked\n        ? 'linear-gradient(90deg, #ff5656, #c16868)'\n        : 'linear-gradient(90deg, #56ccff, # 6eafb4)'};\n `;\n","import React from 'react';\nimport { AnswerObject } from '../App';\nimport { ButtonWrapper } from './QuestionCard.style';\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswers: AnswerObject | undefined;\n  questionNr: number;\n  totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswers,\n  questionNr,\n  totalQuestions,\n}) => {\n  return (\n    <div className=\"questionCard\">\n      <h3 className=\"questionCard__title\">\n        Question: {questionNr}/{totalQuestions}\n      </h3>\n      <p\n        className=\"questionCard__questions\"\n        dangerouslySetInnerHTML={{ __html: question }}\n      ></p>\n      {answers.map((answer) => (\n        <ButtonWrapper\n          correct={userAnswers?.correctAnswer === answer}\n          userClicked={userAnswers?.answer === answer}\n          key={answer}\n        >\n          <div className=\"questionCard__answers\" key={answer}>\n            <button\n              className=\"questionCard__answerBtn\"\n              disabled={userAnswers ? true : false}\n              value={answer}\n              onClick={callback}\n            >\n              <span dangerouslySetInnerHTML={{ __html: answer }}></span>\n            </button>\n          </div>\n        </ButtonWrapper>\n      ))}\n    </div>\n  );\n};\nexport default QuestionCard;\n","export const shuffleArray = (array: any[]) => {\n  return [...array].sort(() => Math.random() - 0.5);\n};\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n//components\nimport QuestionCard from './components/QuestionCard';\nimport { QuestionState, fetchQuizQuestions, Difficulty } from './API';\n\n// styles\n// import { GlobalStyle, Wrapper } from './App.style';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  //question number\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  // console.log(fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY));\n  // console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // user answer\n      const answer = e.currentTarget.value;\n      // check answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) setScore((prev) => prev + 1);\n      // save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer: answer,\n        correct: correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    //if not last question, move onto next\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header\">\n          <h1 className=\"header__title\">Trivia App</h1>\n          {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n            <button className=\"header__startBtn\" onClick={startTrivia}>\n              Start Quiz\n            </button>\n          ) : null}\n          {!gameOver ? <h3 className=\"header__score\">Score: {score}</h3> : null}\n\n          {loading && <p> Loading Questions ... </p>}\n        </div>\n        <div className=\"body\">\n          {!loading && !gameOver && (\n            <QuestionCard\n              questionNr={number + 1}\n              totalQuestions={TOTAL_QUESTIONS}\n              question={questions[number].question}\n              answers={questions[number].answers}\n              userAnswers={userAnswers ? userAnswers[number] : undefined}\n              callback={checkAnswer}\n            />\n          )}\n          {!gameOver &&\n          !loading &&\n          userAnswers.length === number + 1 &&\n          number !== TOTAL_QUESTIONS - 1 ? (\n            <button className=\"body__nextQuestion\" onClick={nextQuestion}>\n              Next\n            </button>\n          ) : null}\n        </div>\n\n        <img src={logo} className=\"logo\" alt=\"logo\" />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}